name: 🚀 Smart Build & Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wenalyzer/pill-detector

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Image
      run: |
        echo "🧪 Testing the built Docker image..."
        
        # 簡化的 image 選擇 (移除不會執行的 tag 分支)
        if [ "${{ github.ref_name }}" == "main" ]; then
          TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        else
          # PR 情況
          TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"
        fi
        
        echo "Testing image: $TEST_IMAGE"
        
        # 啟動容器
        docker run -d --name test-container -p 8000:8000 "$TEST_IMAGE"
        
        # 等待啟動
        echo "⏳ Waiting for container to start..."
        sleep 60
        
        # 檢查容器狀態
        if ! docker ps | grep test-container; then
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # 健康檢查
        echo "🔍 Testing health endpoint..."
        for i in {1..20}; do
          if curl -s -f http://localhost:8000/health > /dev/null; then
            echo "✅ Health check passed after ${i} attempts"
            break
          fi
          echo "⏳ Attempt $i/20, retrying in 5s..."
          sleep 5
          if [ $i -eq 20 ]; then
            echo "❌ Health check failed"
            docker logs test-container
            exit 1
          fi
        done
        
        # API 測試
        echo "🔍 Testing endpoints..."
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/classes || exit 1
        
        echo "🎉 All tests passed!"
    
    - name: Cleanup test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
    
    - name: Build Summary
      if: always()
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Built Images" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "curl http://localhost:8000/health" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY