name: 🚀 Smart Build & Version Management

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # 支援版本標籤
  pull_request:
    branches: [ main ]  # 新增：PR 觸發

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wenalyzer/pill-detector

jobs:
  build-and-test:  # 改名：更清楚表達功能
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # 🎯 智能標籤生成 (保持原有功能)
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-  # 新增：PR 標籤
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-,format=short  # 新增：SHA 標籤
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 構建快取 (保持原有功能)
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # 🧪 新增：整合測試
    - name: Test Docker Image
      run: |
        echo "🧪 Testing the built Docker image..."
        
        # 取得剛構建的 image
        TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "Testing image: $TEST_IMAGE"
        
        # 啟動容器
        docker run -d --name test-container -p 8000:8000 $TEST_IMAGE
        
        # 等待啟動
        echo "⏳ Waiting for container to start..."
        sleep 60
        
        # 檢查容器狀態
        if ! docker ps | grep test-container; then
          echo "❌ Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # 測試健康檢查
        echo "🔍 Testing health endpoint..."
        for i in {1..30}; do
          if curl -s -f http://localhost:8000/health > /dev/null; then
            echo "✅ Health check passed after ${i} attempts"
            break
          fi
          echo "⏳ Attempt $i/30, retrying in 5s..."
          sleep 5
          if [ $i -eq 30 ]; then
            echo "❌ Health check failed after 30 attempts"
            docker logs test-container
            exit 1
          fi
        done
        
        # 測試基本 API
        echo "🔍 Testing basic endpoints..."
        
        echo "Testing root endpoint..."
        curl -f http://localhost:8000/ || (echo "❌ Root endpoint failed" && exit 1)
        
        echo "Testing classes endpoint..."
        curl -f http://localhost:8000/classes || (echo "❌ Classes endpoint failed" && exit 1)
        
        echo "🎉 All integration tests passed!"
    
    - name: Cleanup test container
      if: always()
      run: |
        docker stop test-container || true
        docker rm test-container || true
    
    # 📊 新增：構建結果摘要
    - name: Build Summary
      if: always()
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Built Images" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Quick Start" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "curl http://localhost:8000/health" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY